<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

<!-- Change DB (postgres/hsql) by comment/uncomment property-placeholder -->
<!--    <context:property-placeholder location="classpath:db/postgres.properties" system-properties-mode="OVERRIDE"/>-->
    <context:property-placeholder location="classpath:db/hsqldb.properties" system-properties-mode="OVERRIDE"/>

<!--
    For postgres driver logging
    It uses java.util.logging and logged via jul-to-slf4j bridge
    https://stackoverflow.com/a/27296470/548473

    запускаем выполнение статического метода install()
    иначе записи в логе дублируются
-->
    <bean class="org.springframework.beans.factory.config.MethodInvokingBean">
        <property name="staticMethod" value="org.slf4j.bridge.SLF4JBridgeHandler.install" />
    </bean>

    <context:component-scan base-package="ru.javawebinar.**.repository.jpa"/>

    <jdbc:initialize-database data-source="dataSource" enabled="${database.init}">
        <jdbc:script location="${jdbc.initLocation}"/>
        <jdbc:script encoding="utf-8" location="classpath:db/populateDB.sql"/>
    </jdbc:initialize-database>

    <!--no pooling-->
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${database.driverClassName}"/>
        <property name="url" value="${database.url}"/>
        <property name="username" value="${database.username}"/>
        <property name="password" value="${database.password}"/>
    </bean>

<!--                                                                   Local -> не используем распределённые транзакции, -->
<!--                                                                   когда больше 1 базы данных                       -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          p:dataSource-ref="dataSource"
          p:packagesToScan="ru.javawebinar.**.model">
        <!--p:persistenceUnitName="persistenceUnit">-->

<!--     пропертя ниже - альтернатива заданию PersistenceUnit-->

        <property name="jpaPropertyMap">
            <map>
<!--                чтобы при выводе SQL команд, они были отформатированы -->
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).FORMAT_SQL}" value="${hibernate.format_sql}"/>
<!--                чтобы при выводе SQL команд, выводились и SQL комментарии -->
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SQL_COMMENTS}" value="${hibernate.use_sql_comments}"/>
<!--                 по умолчанию false, см AbstractBaseEntity                       -->
<!--            С версии 5.2.13.Final загрузка прокси при обращении к id управляется -->
<!--            флагом JPA_PROXY_COMPLIANCE (по умолчанию запрос не делается)        -->
                <entry key="#{T(org.hibernate.cfg.AvailableSettings).JPA_PROXY_COMPLIANCE}" value="false"/>
<!--                                                                     HBM2DDL_AUTO - по entity генерация базы           -->
                <!--<entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_AUTO}" value="${hibernate.hbm2ddl.auto}"/>-->
            </map>
        </property>

<!--        чтобы выводились SQL команды в консоль -->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
                  p:showSql="${jpa.showSql}">
            </bean>
        </property>
    </bean>


<!--   чтобы заработало @Transactional  -->
    <tx:annotation-driven/>

    <!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA - когда несколько БД) -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="entityManagerFactory"/>


<!--    для JDBC: -->
    <!--
        <context:component-scan base-package="ru.javawebinar.**.repository.jdbc"/>
        <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
            <constructor-arg ref="dataSource"/>
        </bean>

        <bean id="namedJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
            <constructor-arg ref="jdbcTemplate"/>
        </bean>
    -->
</beans>